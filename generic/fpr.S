################################################################################
#
#  Floating Point Register Tests
#  Author: Foez Ahmed (foez.official@gmail.com)
#
#  This file is part of squared-studio:risc-v-tests
#  Copyright (c) 2025 squared-studio
#  Licensed under the MIT License
#  See LICENSE file in the project root for full license information
#
################################################################################

# This header file provides macros and definitions for bare-metal RISC-V
# assembly tests, primarily for use in simulation environments like Spike.
#include "ss_riscv_asm.S"

################################################################################
# Macro Define : Local macro defination
################################################################################

#if __riscv_flen == 128
        #define COPY_DATA(REG)                  \
                flq     REG,    0(x30);         \
                addi    x30,    x30,    16;     \
                fsq     REG,    0(x31);         \
                addi    x31,    x31,    16;
#elif __riscv_flen == 64
        #define COPY_DATA(REG)                  \
                fld     REG,    0(x30);         \
                addi    x30,    x30,    8;      \
                fsd     REG,    0(x31);         \
                addi    x31,    x31,    8;
#elif __riscv_flen == 32
        #define COPY_DATA(REG)                  \
                flw     REG,    0(x30);         \
                addi    x30,    x30,    4;      \
                fsw     REG,    0(x31);         \
                addi    x31,    x31,    4;
#elif __riscv_flen == 16
        #define COPY_DATA(REG)                  \
                flh     REG,    0(x30);         \
                addi    x30,    x30,    2;      \
                fsh     REG,    0(x31);         \
                addi    x31,    x31,    2;
#endif


################################################################################
# Program Entry Point
################################################################################

_start:

        li      x11,    1
        slli    x11,    x11,    13
        or      x10,    x10,    x11

        csrs    mstatus,    x10

        la      x30,    LOAD_DATA_BEGIN
        la      x31,    TEST_DATA_BEGIN

        COPY_DATA(f0);  COPY_DATA(f0);  COPY_DATA(f0);  COPY_DATA(f0);
        COPY_DATA(f0);  COPY_DATA(f0);  COPY_DATA(f0);  COPY_DATA(f0);
        COPY_DATA(f1);  COPY_DATA(f1);  COPY_DATA(f1);  COPY_DATA(f1);
        COPY_DATA(f1);  COPY_DATA(f1);  COPY_DATA(f1);  COPY_DATA(f1);
        COPY_DATA(f2);  COPY_DATA(f2);  COPY_DATA(f2);  COPY_DATA(f2);
        COPY_DATA(f2);  COPY_DATA(f2);  COPY_DATA(f2);  COPY_DATA(f2);
        COPY_DATA(f3);  COPY_DATA(f3);  COPY_DATA(f3);  COPY_DATA(f3);
        COPY_DATA(f3);  COPY_DATA(f3);  COPY_DATA(f3);  COPY_DATA(f3);
        COPY_DATA(f4);  COPY_DATA(f4);  COPY_DATA(f4);  COPY_DATA(f4);
        COPY_DATA(f4);  COPY_DATA(f4);  COPY_DATA(f4);  COPY_DATA(f4);
        COPY_DATA(f5);  COPY_DATA(f5);  COPY_DATA(f5);  COPY_DATA(f5);
        COPY_DATA(f5);  COPY_DATA(f5);  COPY_DATA(f5);  COPY_DATA(f5);
        COPY_DATA(f6);  COPY_DATA(f6);  COPY_DATA(f6);  COPY_DATA(f6);
        COPY_DATA(f6);  COPY_DATA(f6);  COPY_DATA(f6);  COPY_DATA(f6);
        COPY_DATA(f7);  COPY_DATA(f7);  COPY_DATA(f7);  COPY_DATA(f7);
        COPY_DATA(f7);  COPY_DATA(f7);  COPY_DATA(f7);  COPY_DATA(f7);
        COPY_DATA(f8);  COPY_DATA(f8);  COPY_DATA(f8);  COPY_DATA(f8);
        COPY_DATA(f8);  COPY_DATA(f8);  COPY_DATA(f8);  COPY_DATA(f8);
        COPY_DATA(f9);  COPY_DATA(f9);  COPY_DATA(f9);  COPY_DATA(f9);
        COPY_DATA(f9);  COPY_DATA(f9);  COPY_DATA(f9);  COPY_DATA(f9);
        COPY_DATA(f10); COPY_DATA(f10); COPY_DATA(f10); COPY_DATA(f10);
        COPY_DATA(f10); COPY_DATA(f10); COPY_DATA(f10); COPY_DATA(f10);
        COPY_DATA(f11); COPY_DATA(f11); COPY_DATA(f11); COPY_DATA(f11);
        COPY_DATA(f11); COPY_DATA(f11); COPY_DATA(f11); COPY_DATA(f11);
        COPY_DATA(f12); COPY_DATA(f12); COPY_DATA(f12); COPY_DATA(f12);
        COPY_DATA(f12); COPY_DATA(f12); COPY_DATA(f12); COPY_DATA(f12);
        COPY_DATA(f13); COPY_DATA(f13); COPY_DATA(f13); COPY_DATA(f13);
        COPY_DATA(f13); COPY_DATA(f13); COPY_DATA(f13); COPY_DATA(f13);
        COPY_DATA(f14); COPY_DATA(f14); COPY_DATA(f14); COPY_DATA(f14);
        COPY_DATA(f14); COPY_DATA(f14); COPY_DATA(f14); COPY_DATA(f14);
        COPY_DATA(f15); COPY_DATA(f15); COPY_DATA(f15); COPY_DATA(f15);
        COPY_DATA(f15); COPY_DATA(f15); COPY_DATA(f15); COPY_DATA(f15);
        COPY_DATA(f16); COPY_DATA(f16); COPY_DATA(f16); COPY_DATA(f16);
        COPY_DATA(f16); COPY_DATA(f16); COPY_DATA(f16); COPY_DATA(f16);
        COPY_DATA(f17); COPY_DATA(f17); COPY_DATA(f17); COPY_DATA(f17);
        COPY_DATA(f17); COPY_DATA(f17); COPY_DATA(f17); COPY_DATA(f17);
        COPY_DATA(f18); COPY_DATA(f18); COPY_DATA(f18); COPY_DATA(f18);
        COPY_DATA(f18); COPY_DATA(f18); COPY_DATA(f18); COPY_DATA(f18);
        COPY_DATA(f19); COPY_DATA(f19); COPY_DATA(f19); COPY_DATA(f19);
        COPY_DATA(f19); COPY_DATA(f19); COPY_DATA(f19); COPY_DATA(f19);
        COPY_DATA(f20); COPY_DATA(f20); COPY_DATA(f20); COPY_DATA(f20);
        COPY_DATA(f20); COPY_DATA(f20); COPY_DATA(f20); COPY_DATA(f20);
        COPY_DATA(f21); COPY_DATA(f21); COPY_DATA(f21); COPY_DATA(f21);
        COPY_DATA(f21); COPY_DATA(f21); COPY_DATA(f21); COPY_DATA(f21);
        COPY_DATA(f22); COPY_DATA(f22); COPY_DATA(f22); COPY_DATA(f22);
        COPY_DATA(f22); COPY_DATA(f22); COPY_DATA(f22); COPY_DATA(f22);
        COPY_DATA(f23); COPY_DATA(f23); COPY_DATA(f23); COPY_DATA(f23);
        COPY_DATA(f23); COPY_DATA(f23); COPY_DATA(f23); COPY_DATA(f23);
        COPY_DATA(f24); COPY_DATA(f24); COPY_DATA(f24); COPY_DATA(f24);
        COPY_DATA(f24); COPY_DATA(f24); COPY_DATA(f24); COPY_DATA(f24);
        COPY_DATA(f25); COPY_DATA(f25); COPY_DATA(f25); COPY_DATA(f25);
        COPY_DATA(f25); COPY_DATA(f25); COPY_DATA(f25); COPY_DATA(f25);
        COPY_DATA(f26); COPY_DATA(f26); COPY_DATA(f26); COPY_DATA(f26);
        COPY_DATA(f26); COPY_DATA(f26); COPY_DATA(f26); COPY_DATA(f26);
        COPY_DATA(f27); COPY_DATA(f27); COPY_DATA(f27); COPY_DATA(f27);
        COPY_DATA(f27); COPY_DATA(f27); COPY_DATA(f27); COPY_DATA(f27);
        COPY_DATA(f28); COPY_DATA(f28); COPY_DATA(f28); COPY_DATA(f28);
        COPY_DATA(f28); COPY_DATA(f28); COPY_DATA(f28); COPY_DATA(f28);
        COPY_DATA(f29); COPY_DATA(f29); COPY_DATA(f29); COPY_DATA(f29);
        COPY_DATA(f29); COPY_DATA(f29); COPY_DATA(f29); COPY_DATA(f29);
        COPY_DATA(f30); COPY_DATA(f30); COPY_DATA(f30); COPY_DATA(f30);
        COPY_DATA(f30); COPY_DATA(f30); COPY_DATA(f30); COPY_DATA(f30);
        COPY_DATA(f31); COPY_DATA(f31); COPY_DATA(f31); COPY_DATA(f31);
        COPY_DATA(f31); COPY_DATA(f31); COPY_DATA(f31); COPY_DATA(f31);

        # Terminate the simulation. The exit code (0) indicates success.
        EXIT(0)

################################################################################
# Macro Undefine : Undefine the local macro to prevent accidental use later.
################################################################################

################################################################################
# Data section for storing test results.
################################################################################

# The .data section is used for initialized data, but here we use .zero to
# reserve space that will be written to by the test.
.section .data
# Align the following data to an 8-byte boundary (2^3). This is good practice
# and often required for certain data types or instructions.
.align 3

# Symbol marking the beginning load data.
LOAD_DATA_BEGIN:
#if __riscv_flen == 128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
.quad RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128, RAND128
#elif __riscv_flen == 64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
.dword RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64, RAND64
#elif __riscv_flen == 32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
.word RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32, RAND32
#elif __riscv_flen == 16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
.half RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16, RAND16
#endif

# Symbol marking the beginning of the data region to be extracted.
TEST_DATA_BEGIN:
  .zero __riscv_flen / 8 * 256
TEST_DATA_END:

